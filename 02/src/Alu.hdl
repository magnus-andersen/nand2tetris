/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	
        //zx, zy, nx, ny
        Not16(in=x, out=xNot);
        Not16(in=y, out=yNot);
        // sel[1] = zx/y, sel[0] = nx/y
        // 00 = x/y = x/y
        // 01 = !x/y
        // 10 = 0/0
        // 11 = 1/1
        Mux4Way16(a=x, b=xNot, c=false, d=true, sel[1]=zx, sel[0]=nx, out=xOut);
        Mux4Way16(a=y, b=yNot, c=false, d=true, sel[1]=zy, sel[0]=ny, out=yOut);		
		
        // f
        Add16(a=xOut, b=yOut, out=xyAdd);
        And16(a=xOut, b=yOut, out=xyAnd);
        Mux16(a=xyAnd, b=xyAdd, sel=f, out=fOut);
		
        // no
        Not16(in=fOut, out=outNot);
        Mux16(a=fOut, b=outNot, sel=no, out[15]=outMsb, 
            out[0..7]=outFirst, out[8..15]=outLast, out=out);
		
        // zr
        Or8Way(in=outFirst, out=zrFirst);
        Or8Way(in=outLast, out=zrLast);
        Or(a=zrFirst, b=zrLast, out=zrNot);
        Not(in=zrNot, out=zr);
		
        // ng
        And(a=outMsb, b=outMsb, out=ng);	
}
